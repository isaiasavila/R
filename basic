# array sequencial
sequencia <- seq(10,30)
# array de boolean
resultado <- c(T,F,T,F,T,T)
# array de strings
stooges <- c("Moe","Larry", "Curly")
# c() cria um vetor
x <- c(3,4,5)
# mostra objetos do ambiente
ls()
# sum() retorna a soma
sum(x)
# mean() retorna a média
mean(x)
# var() retorna a variância
var(x)
# array para teste
capacidade <- c(14,13,14,13,16,NA,NA,20,NA)
# média sem tratamento
mean(capacidade)
# média com tratamento
mean(capacidade, na.rm=TRUE)
# Verifica um conjunto de dados faltantes, retornando um valor boolean
is.na(capacidade)
# substr(Valor, Início, Final) - correspondência posicional
substr("isaias", 1, 3)
# mesma saída de cima, porém com argumentos nomeados - correspondência de palavraschave, nesse caso a ordem não altera o resultado
substr(stop=3, start=1, "isaias")
# função simples
soma_quadrados <- function(x,y,z){# lista os argumentos
somaq <- sum(c(x^2,y^2,z^2))# realiza as operações
return(somaq)# retorno do valor
}
soma_quadrados(3,4,5)
# sequência de números, de um em um
sequencia_numerica <- 10:30
# um array sequencial com um passo de 2 em 2
vinte_numeros_pares <- seq(2,40,2)
# um array que repete 4 vezes o argumento
sequencia_repetida <- rep(sequencia_numerica,4)
sequencia_repetida
y <- c(6,8,2)
# um array com os valores de y, pela quantidade dos valores de x
sequencia_repetida <- rep(y,x)
sequencia_repetida
# criar matriz
num_matrix <- seq(5,100,5)
dim(num_matrix) <-c(5,4)
num_matrix
# transpor
t(num_matrix)
# criar matriz - outra forma
num_matrix <- matrix(seq(5,100,5),nrow=5)
num_matrix
# criar matriz - outra forma - alterando a forma de preenchimento
num_matrix <- matrix(seq(5,100,5),nrow=5,byrow=T)
num_matrix
# buscando um elemento
num_matrix[5,4]
# variável categórica
eye_color <- c(2,2,4,1,5,5,5,6,1,3,6,3,1,4)
feye_color <- factor(eye_color)
levels(feye_color) <- c("amber","blue","brown","gray","green","hazel")
# lista
empathy_score <- c(15,21,45,32,61,74,53,92,83,22,67,55,42,44)
eyes_and_empathy <- list(eyes_code=eye_color,eyes=feye_color, empathy=empathy_score)
eyes_and_empathy
# acessando o quarto elemento da lista empathy que foi concatenada anteriormente
eyes_and_empathy$empathy[4]
# teste T
t.result <- t.test(eyes_and_empathy$empathy, mu = 30)
t.result
t.result$data.name
t.result$p.value
t.result$statistic
# dataframe
e <- data.frame(eye_color,feye_color,empathy_score)
e
e[7,]
# editar dataframe tal qual uma planilha eletrônica
edit(e)
# selecionando uma lista com o if
e.blue <- e$empathy_score[e$feye_color=="blue"]
e.green <- e$empathy_score[e$feye_color=="green"]
e.hazel <- e$empathy_score[e$feye_color=="hazel"]
e.averages <- c(mean(e.blue),mean(e.green),mean(e.hazel))
e.amounts <- c(length(e.blue), length(e.green), length(e.hazel))
colors <- c("blue","green","hazel")
e.averages.frame <- data.frame(color=colors, average=e.averages, n=e.amounts)
e.averages.frame
color average n
# Instalar pacote MASS e depois utilizar as linhas abaixo
edit(anorexia)
# diferença de peso, antes e depois
anorexia$Postwt-anorexia$Prewt
# teste T
t.test(anorexia$Postwt-anorexia$Prewt, mu=0)
# instalar biblioteca ggplot2
install.packages(“ggplot2”)
# funções
function(dependent_var ~ independent_var, data=data_frame)
# análise de variância
aov(Postwt-Prewt ~ Treat, data=anorexia)
# ler valores
#  read.<format>(“File Name”, arg1, arg2, ...)
# write.<format>(dataframe, “File Name”, arg1, arg2, ...)
# ler arquivo
scores_frame <- read.xlsx("C:/Spreadsheets/Scores.xlsx",sheetName="Sheet1")
# mostrar tudo
scores_frame
# mostrar específico
scores_frame$Math_Score[4]
# escrever arquivo
write.xlsx(anorexia,"C:/Spreadsheets/anorexia.xlsx")
# ler arquivo csv
read.csv("C:/CSVFiles/Scores.csv")
# escrever arquivo csv
write.csv(anorexia,"C:/CSVFiles/anorexia.csv")
# ler arquivo txt
read.table("C:/TextFiles/ScoresText.txt", header=TRUE)
Student Math_Score Science_Score
# escrever arquivo txt, o separador nesse exemplo é o <TAB>. quote não deixa ir para o arquivo as "
write.table(anorexia, "C:/TextFiles/anorexia.txt", quote = FALSE, sep = "\t")
# ler arquivo excel na pasta raiz
read.xlsx("Scores.xlsx","Sheet1")
# biblioteca MASS
edit(Cars93)
# ggplot2
# graphics_function(data, arg1, arg2, ...)
# biblioteca MASS - histograma
hist(Cars93$Price, xlab="Price (x $1,000)", xlim = c(0,70), main = "Prices of 93 Models of 1993 Cars", breaks = 4, probability = TRUE)
lines(density(Cars93$Price))
table(Cars93$Type)
# gráfico de barras
barplot(table(Cars93$Type))
barplot(table(Cars93$Type),ylim=c(0,25), xlab="Type", ylab="Frequency", axis.lty = "solid", space = .05)
# gráfico de pizza
pie(table(Cars93$Type))
# gráfico de pontos
type.frame <- data.frame(table(Cars93$Type))
dotchart(type.frame$Freq,type.frame$Var1)
dotchart(type.frame[,2],type.frame[,1])
# gráfico de barras agrupadas
rev.values <- c(1000,1300,1300,1100,1400,800,1200,1500,1850,2330,860,1300,1400,1600,1970,570,380,450,465,580,155,190,210,250,300)
space.rev <- matrix(rev.values,nrow=5,byrow = T)
colnames(space.rev) <- c("1990","1991","1992","1993","1994")
rownames(space.rev) <- c("Commercial Satellites Delivered","Satellite Services","Satellite Ground Equipment","Commercial Launches","Remote Sensing Data")
space.rev
color.names = c("black","grey25","grey50","grey75","white")
barplot(space.rev, beside = T, xlab= "Year",ylab= "Revenue(X$1,000)", col=color.names)
legend(1,2300,rownames(space.rev), cex=0.7, fill = color.names, bty = "n")
plot(Cars93$Horsepower, Cars93$MPG.city, xlab="Horsepower",ylab="MPG City", main ="MPG City vs Horsepower")
plot(Cars93$MPG.city ~ Cars93$Horsepower, xlab="Horsepower",ylab="MPG City", main ="MPG City vs Horsepower")
plot(Cars93$Horsepower,Cars93$MPG.city, xlab= "Horsepower", ylab="MPG City", main = "MPG City vs Horsepower",pch=16)
pch = as.character(Cars93$Cylinders)
plot(Cars93$Horsepower,Cars93$MPG.city, xlab="Horsepower",ylab="MPG City", main = "MPG City vs Horsepower", pch = as.character (Cars93$Cylinders))
# gráfico de pares
cars.subset <- subset(Cars93, select = c(MPG.city,Price,Horsepower))
head(cars.subset)
pairs(cars.subset)
boxplot(Cars93$Horsepower ~ Cars93$Cylinders, xlab="Cylinders", ylab="Horsepower")
boxplot(Horsepower ~ Cylinders, data = Cars93, xlab="Cylinders", ylab="Horsepower")
ggplot(Cars93, aes(x=Price))
# gráfico histograma geométrico
ggplot(Cars93, aes(x=Price)) + geom_histogram(binwidth=5,color="black",fill="white") + labs(x = "Price (x $1000)", y="Frequency", title= "Prices of93 Models of 1993 Cars")
# gráfico histograma geométrico - usando o geom_bar()
ggplot(Cars93, aes(x=Type))+ geom_bar() + labs(y="Frequency", title="Car Type and Frequency in Cars93")
#
type.frame <- data.frame(table(Cars$93.Type))
colnames(type.frame)<- c("Type","Frequency")
type.frame
ggplot(type.frame, aes(x=Frequency,y= Type))
# gráficos de pontos
ggplot(type.frame, aes(x=Frequency,y=reorder(Type,Frequency))) +
geom_point(size = 4) + theme_bw() + theme(panel.grid.major.x=element_blank(), panel.grid.major.y=element_line(color = "black", linetype= "dotted"))+ labs(y="Type")
# biblioteca reshape2
space.melt <- melt(space.rev)
head(space.melt)
colnames(space.melt) <- c("Industry","Year","Revenue")
head(space.melt)
ggplot(space.melt, aes(x=Year,y=Revenue,fill=Industry)) + geom_bar(stat = "identity", position = "dodge", color="black") + scale_fill_grey(start = 0,end = 1)+ labs(y="Revenue (X $1,000)")+ theme_bw()+ theme(panel.grid.major.x = element_blank())
ggplot(Cars93,aes(x=Horsepower,y=MPG.city))+ geom_point()
ggplot(Cars93, aes(x=Horsepower, y=MPG.city, label=Cylinders)) + geom_text() + theme_bw() + theme(panel.grid=element_blank())
# bilbioteca GGally
cars.subset <- subset(Cars93, select = c(MPG.city,Price,Horsepower))
ggpairs(cars.subset)
cars.subset <- subset(Cars93, select = c(MPG. city,Price, Horsepower,Cylinders))
ggpairs(cars.subset)
# gráfico de caixa
ggplot(Cars93, aes(x=Cylinders, y= Horsepower))
ggplot(Cars93, aes(x=Cylinders,y=Horsepower)) + geom_boxplot()+geom_point()+geom_jitter()
